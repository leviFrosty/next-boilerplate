import{_ as a,c as l,a as s,o}from"./app-DGM2Wwv9.js";const i={};function t(n,e){return o(),l("div",null,[...e[0]||(e[0]=[s(`<h1 id="folder-structure" tabindex="-1"><a class="header-anchor" href="#folder-structure"><span>Folder structure</span></a></h1><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code><span class="line"><span class="token keyword">graph</span> TD</span>
<span class="line">    app<span class="token text string">[app&lt;br/&gt;settings, dashboard, etc.]</span></span>
<span class="line">    global<span class="token text string">[Global Modules:&lt;br/&gt;lib, components, assets, config, db, api, e2e, etc.]</span></span>
<span class="line">    features<span class="token text string">[Features:&lt;br/&gt;features/users, features/dashboard, ...]</span></span>
<span class="line"></span>
<span class="line">    global <span class="token arrow operator">--&gt;</span> features</span>
<span class="line">    features <span class="token arrow operator">--&gt;</span> app</span>
<span class="line">    global <span class="token arrow operator">--&gt;</span> app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="details" tabindex="-1"><a class="header-anchor" href="#details"><span>Details</span></a></h2><ul><li><code>app</code> - renders pages only <ul><li>All business logic and functionality must live outside of <code>/app</code>.</li><li><code>/app</code> should <strong>only consume</strong> modules from other folders.</li></ul></li><li><code>assets</code> - provides global static content for use by the application and features.</li><li><code>e2e</code> - contains global end-to-end tests.</li><li><code>lib</code> - stores global utility functions and logic shared across the app and features.</li><li><code>components</code> - houses global UI components used throughout the app and features.</li><li><code>config</code> - contains global constants and configuration.</li><li><code>db</code> - exposes global database functions.</li><li><code>api</code> - provides global API logic.</li><li>...</li><li><code>features</code><ul><li><code>feature1</code> (e.g. Cart Page) <ul><li><code>lib</code> - logic specific to the feature.</li><li><code>components</code> - feature-specific UI components.</li><li><code>db</code> - data access specific to the feature.</li><li><code>api</code> - API functions exposed only for the feature.</li><li>...</li></ul></li><li><code>feature2</code> (e.g. Dashboard) <ul><li><code>lib</code></li><li><code>components</code></li><li><code>db</code></li><li><code>api</code></li><li>...</li></ul></li></ul></li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h2><p>Read <code>&lt;-</code> as &quot;imports&quot;</p><ol><li><code>app</code> &lt;- <code>lib</code> ✅</li><li><code>lib</code> &lt;- <code>features/dashboard/db</code> ❌</li><li><code>features/dashboard/db</code> &lt;- <code>lib</code> ✅</li><li><code>app</code> &lt;- <code>features/dashboard/components</code> ✅</li><li><code>features/dashboard/components</code> &lt;- <code>app</code> ❌</li><li><code>components</code> &lt;- <code>features/dashboard/components</code> ❌</li><li><code>features/feature2/components</code> &lt;- <code>components</code> ✅</li></ol><h2 id="compliance" tabindex="-1"><a class="header-anchor" href="#compliance"><span>Compliance</span></a></h2><p>This folder structure is enforced by the linter. Disregarding this will result in an error and fail CI.</p><h2 id="why" tabindex="-1"><a class="header-anchor" href="#why"><span>Why</span></a></h2><ol><li>As we develop a feature, each feature is guaranteed to be entirely indepent of <em>all of the other features</em>.</li><li>This one-way import flow reduces ciclical imports and separates concerns by feature.</li><li>Long term, this will significantly reduce complexity when adding new features or changing existing ones as you will not see inter-feature dependencies.</li><li>Causes developer to critically think about <em>what</em> is being placed <em>where</em>. Only globally used functions should be placed in non-<code>features/*</code> folders.</li></ol><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><ol><li><p>See Kyle Cook&#39;s <a href="https://www.youtube.com/watch?v=xyxrB2Aa7KE&amp;t=1s" target="_blank" rel="noopener noreferrer">Youtube video</a> detailing this exact folder structure and why it is extremely useful in large codebases.</p></li><li><p>Example product <a href="https://github.com/WebDevSimplified/parity-deals-clone/tree/feature-folder-structure" target="_blank" rel="noopener noreferrer">source code</a></p></li></ol>`,13)])])}const c=a(i,[["render",t]]),d=JSON.parse('{"path":"/project-structure.html","title":"Folder structure","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Details","slug":"details","link":"#details","children":[]},{"level":2,"title":"Examples","slug":"examples","link":"#examples","children":[]},{"level":2,"title":"Compliance","slug":"compliance","link":"#compliance","children":[]},{"level":2,"title":"Why","slug":"why","link":"#why","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"updatedTime":1760713330000,"contributors":[{"name":"Levi Wilkerson","username":"","email":"levi.wilkerson@proton.me","commits":2}],"changelog":[{"hash":"f75796cf7eac1e47e954a55cf6de5e6b14a07ddf","time":1760713330000,"email":"levi.wilkerson@proton.me","author":"Levi Wilkerson","message":"feat: add eslint folder structure enforcement, add prettier"},{"hash":"f600322295fda1cbe8723fc3b21a1ea8c772bdcd","time":1760706480000,"email":"levi.wilkerson@proton.me","author":"Levi Wilkerson","message":"docs: add project-structure docs"}]},"filePathRelative":"project-structure.md"}');export{c as comp,d as data};
